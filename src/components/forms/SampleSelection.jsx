import { useEffect, useState } from 'react'
import { useDispatch } from 'react-redux'
import sampleService from '../../services/samples'
import { changeSamples } from '../../reducers/sampleReducer'

const SampleSelection = () => {
	const [samples, setSamples] = useState([])
	useEffect(() => {
		sampleService.getSamples().then(result => setSamples(result.data))
	}, [])

	const dispatch = useDispatch()

	const handleSubmit = evt => {
		evt.preventDefault()
		const strongSampleUrl = evt.target.strongsample.value
		const weakSampleUrl = evt.target.weaksample.value
		dispatch(changeSamples({ strongBeatSample: strongSampleUrl, weakBeatSample: weakSampleUrl }))
	}

	// Sample urls can be used as unique identifiers as they are
	// generated by cloudinary to be unique

	return (
		<form onSubmit={handleSubmit}>
			<div>
				<label>Select sample for strong beats
					<select name="strongsample" id="strongsample">
						{samples.map(s => (
							<option key={s.url} value={JSON.stringify(s)}>{s.name}</option>
						))}
					</select>
				</label>
			</div>
			<div>
				<label>Select sample for weak beats
					<select name="weaksample" id="weaksample">
						{samples.map(s => (
							<option key={s.url} value={JSON.stringify(s)}>{s.name}</option>
						))}
					</select>
				</label>
			</div>
			<button type="submit">Confirm</button>
		</form>
	)
}

export default SampleSelection